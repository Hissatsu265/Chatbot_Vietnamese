"""
Vietnamese RAG (Retrieval-Augmented Generation) System
----------------------------------------------------
H·ªá th·ªëng truy xu·∫•t v√† t·∫°o c√¢u tr·∫£ l·ªùi th√¥ng minh d·ª±a tr√™n t√†i li·ªáu PDF ti·∫øng Vi·ªát.
Cho ph√©p t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng th√¥ng qua giao di·ªán d√≤ng l·ªánh.

Pipeline:
1. Setup: T·∫£i d·ªØ li·ªáu, ti·ªÅn x·ª≠ l√Ω, t·∫°o embeddings v√† l∆∞u index
2. Chat: Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p c√¢u h·ªèi v√† nh·∫≠n c√¢u tr·∫£ l·ªùi trong v√≤ng l·∫∑p t∆∞∆°ng t√°c
"""

import numpy as np
import logging
import os
from typing import List, Optional, Dict, Any

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import c√°c module c·∫ßn thi·∫øt
from src.data_loader import load_pdf_text
from src.text_preprocessing import preprocess_text
from src.embedder import VietnameseEmbedder, save_faiss_index
from src.retriever import retrieve_top_k, retrieve_with_mmr
from src.chatbot import ask_gemini
from src.descripe_file import describe


class RAGPipeline:
    """Pipeline cho h·ªá th·ªëng RAG ti·∫øng Vi·ªát"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o pipeline"""
        self.pdf_path = None
        self.index_path = None
        self.system_prompt = None
        self.is_setup_complete = False
    
    def setup(self, pdf_path: str, index_path: str = "embeddings/vector_store/faiss_index") -> bool:
        """
        Thi·∫øt l·∫≠p v√† x√¢y d·ª±ng vector store t·ª´ PDF
        
        Args:
            pdf_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF ngu·ªìn
            index_path: ƒê∆∞·ªùng d·∫´n l∆∞u/n·∫°p FAISS index
            
        Returns:
            bool: Tr·∫°ng th√°i th√†nh c√¥ng c·ªßa qu√° tr√¨nh setup
        """
        self.pdf_path = pdf_path
        self.index_path = index_path
        
        try:
            # T·∫°o th∆∞ m·ª•c ch·ª©a index n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs(os.path.dirname(index_path), exist_ok=True)
            
            logger.info(f"ƒêang t·∫£i d·ªØ li·ªáu t·ª´ {pdf_path}")
            text = load_pdf_text(pdf_path)
            
            logger.info("ƒêang ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n")
            processed_sentences = preprocess_text(text)
            
            logger.info("ƒêang t·∫°o embeddings")
            embedder = VietnameseEmbedder()
            embeddings = embedder.encode(processed_sentences)
            
            logger.info(f"ƒêang l∆∞u FAISS index t·∫°i {index_path}")
            save_faiss_index(np.array(embeddings), processed_sentences, index_path)
            
            # T·∫°o system prompt
            logger.info("ƒêang t·∫°o system prompt")
            self.system_prompt = describe()
            
            self.is_setup_complete = True
            logger.info("Setup ho√†n t·∫•t")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói trong qu√° tr√¨nh setup: {str(e)}")
            return False
    
    def chat_loop(self, use_mmr: bool = True) -> None:
        """
        V√≤ng l·∫∑p chat cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p c√¢u h·ªèi v√† nh·∫≠n c√¢u tr·∫£ l·ªùi
        
        Args:
            use_mmr: S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p MMR ƒë·ªÉ ƒëa d·∫°ng k·∫øt qu·∫£ t√¨m ki·∫øm
        """
        if not self.is_setup_complete:
            logger.error("Vui l√≤ng ch·∫°y ph∆∞∆°ng th·ª©c setup() tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu chat")
            return
        
        print("\n" + "="*50)
        print("ü§ñ CHATBOT TR·∫¢ L·ªúI D·ª∞A TR√äN T√ÄI LI·ªÜU PDF")
        print("="*50)
        print("Nh·∫≠p 'exit', 'quit' ho·∫∑c 'q' ƒë·ªÉ tho√°t")
        print("="*50 + "\n")
        
        while True:
            # Nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
            question = input("\nüìù Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n: ")
            
            # Ki·ªÉm tra tho√°t
            if question.lower() in ['exit', 'quit', 'q']:
                print("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng chatbot. T·∫°m bi·ªát!")
                break
            
            # B·ªè qua c√¢u h·ªèi tr·ªëng
            if not question.strip():
                continue
                
            try:
                # L·∫•y ng·ªØ c·∫£nh li√™n quan d·ª±a tr√™n c√¢u h·ªèi
                logger.info(f"ƒêang truy xu·∫•t ng·ªØ c·∫£nh cho c√¢u h·ªèi: {question}")
                if use_mmr:
                    contexts = retrieve_with_mmr(question)
                else:
                    contexts = retrieve_top_k(question)
                
                context_combined = "\n".join(contexts)
                
                # Hi·ªÉn th·ªã th√¥ng b√°o ch·ªù
                print("‚è≥ ƒêang x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi...")
                
                # T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh
                answer = ask_gemini(self.system_prompt, question, context_combined)
                
                # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
                print(f"\nüí¨ Tr·∫£ l·ªùi: {answer}")
                
            except Exception as e:
                logger.error(f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}")
                print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}")


def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y h·ªá th·ªëng"""
    # Kh·ªüi t·∫°o pipeline
    pipeline = RAGPipeline()
    
    # Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n PDF
    pdf_path = "data/raw/sample.pdf"
    
    # Pipeline 1: Setup - X√¢y d·ª±ng vector store
    setup_success = pipeline.setup(pdf_path)
    
    if setup_success:
        # Pipeline 2: Chat - B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p chat
        pipeline.chat_loop(use_mmr=True)
    else:
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra l·ªói.")


if __name__ == "__main__":
    main()